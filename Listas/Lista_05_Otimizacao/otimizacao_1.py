# ----------------------------------------------------------- #
# Lista 05 - Otimiza√ß√£o                                       #
# Autor         : Andr√© Medeiros                              #
# Cria√ß√£o       : 02/03/24                                    #
# E-mail        : andre.escariao1@gmail.com                   #
# ----------------------------------------------------------- #
# M√©todos da Raz√£o √Åurea e Interpola√ß√£o Quadr√°tica.
# Fun√ß√£o: ùëì (ùë•) = ‚àí(1.5)^6 ‚àí2ùë•^4 + 12ùë•
# a) Gr√°fico da fun√ß√£o.
# b) Valor de ùë• que maximiza a fun√ß√£o ùëì (ùë•) com Busca da raz√£o √°urea. ùë•ùëñ = 0 e ùë•ùëì = 2.
# c) Interpola√ß√£o quadr√°tica com ùë•1 = 0, ùë•2 = 1 e ùë•3 = 2.

import numpy as np
import matplotlib.pyplot as plt

# Definindo a fun√ß√£o
def f(x):
    return -(1.5)**6 - 2*x**4 + 12*x

# a) Gr√°fico da fun√ß√£o
x = np.linspace(0, 2, 400)
y = f(x)

plt.figure(figsize=(8, 6))
plt.plot(x, y, label='f(x) = -(1.5)^6 - 2x^4 + 12x')
plt.title('Gr√°fico da Fun√ß√£o f(x)')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.grid(True)
plt.legend()
plt.show()

# b) Busca da Raz√£o √Åurea
def golden_ratio_search(f, xi, xf, tol=1e-5):
    gr = (np.sqrt(5) - 1) / 2
    x1 = xf - gr * (xf - xi)
    x2 = xi + gr * (xf - xi)
    
    while abs(xf - xi) > tol:
        if f(x1) < f(x2):
            xf = x2
            x2 = x1
            x1 = xf - gr * (xf - xi)
        else:
            xi = x1
            x1 = x2
            x2 = xi + gr * (xf - xi)
    
    return (xi + xf) / 2

# Encontrando o valor de x que maximiza f(x)
xi = 0
xf = 2
x_max = golden_ratio_search(f, xi, xf)
print(f"Valor de x que maximiza f(x) usando busca da raz√£o √°urea: {x_max:.5f}")

# c) Interpola√ß√£o Quadr√°tica
def quadratic_interpolation(f, x1, x2, x3, tol=1e-5):
    while abs(x3 - x1) > tol:
        f1, f2, f3 = f(x1), f(x2), f(x3)
        
        a0 = f1
        a1 = (f2 - f1) / (x2 - x1)
        a2 = ((f3 - f1) / (x3 - x1) - (f2 - f1) / (x2 - x1)) / (x3 - x2)
        
        x_opt = (x1 + x2 - a1/a2) / 2
        
        if a2 > 0:
            x3 = x_opt
        else:
            x1 = x_opt
        
        x1, x2, x3 = sorted([x1, x2, x3], key=f)
        
    return x_opt

# Encontrando o valor de x que maximiza f(x) usando interpola√ß√£o quadr√°tica
x1 = 0
x2 = 1
x3 = 2
x_max_quad = quadratic_interpolation(f, x1, x2, x3)
print(f"Valor de x que maximiza f(x) usando interpola√ß√£o quadr√°tica: {x_max_quad:.5f}")
